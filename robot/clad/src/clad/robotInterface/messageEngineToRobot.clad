/** Clad definitions of all messages sent from the Cozmo engine to the robot and from one part of the robot to another.
 * This file name is now out of date since it should be messageToRobot since messages may not be coming from the engine.
 *
 * Used in the engine, all three robot processors and the test fixture, however, we don't have to build and flash in
 * lockstep because of strict tag space partitioning.
 */

#include "clad/audio/audioMessage.clad"
#include "clad/types/animationTypes.clad"
#include "clad/types/backpackAnimationTriggers.clad"
#include "clad/types/cameraFOVInfo.clad"
#include "clad/types/compositeImageTypes.clad"
#include "clad/types/controllerChannels.clad"
#include "clad/types/dockingSignals.clad"
#include "clad/types/imu.clad"
#include "clad/types/lcdTypes.clad"
#include "clad/types/ledTypes.clad"
#include "clad/types/keepFaceAliveParameters.clad"
#include "clad/types/motorTypes.clad"
#include "clad/types/proceduralFaceTypes.clad"
#include "clad/types/proxMessages.clad"
#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/robotTestModes.clad"
#include "clad/types/switchboardToRobot.clad"
#include "clad/types/textToSpeechTypes.clad"
#include "clad/types/tofDisplayTypes.clad"
#include "clad/types/sdkAudioTypes.clad"

namespace Anki {
namespace Vector {

namespace RobotInterface {

/** Pipe from engine to robot.
 * This cannot be an auto union because we need explicit tag values to partition the RTIP and WiFi code
 * and to make debugging from message dumps more sane.
 */

message CheckCloudConnectivity
{
}

message StartMotorCalibration
{
  bool calibrateHead,
  bool calibrateLift,
  MotorCalibrationReason reason,
}

message DriveWheels
{
  float_32 lwheel_speed_mmps,
  float_32 rwheel_speed_mmps,
  float_32 lwheel_accel_mmps2 = 0.0,
  float_32 rwheel_accel_mmps2 = 0.0
}

message DriveWheelsCurvature
{
  float_32 speed,               // Target speed in mm/sec (or rad/s if curvatureRadius_mm == 0)
                                // If curvatureRadius_mm == 0, the speed is in rad/s where +ve means CCW rotation.
  float_32 accel,               // Acceleration to approach target speed in mm/sec^2
                                // (or rad/s^2 if curvatureRadius_mm == 0)
                                // 0: Max acceleration

  int_16 curvatureRadius_mm     // Radius of arc to drive
                                // u16_MAX or u16_MIN: Straight
                                // +ve: curves left, -ve: curves right
                                // 0: Point turn
}

message MoveLift
{
  float_32 speed_rad_per_sec,
}

message MoveHead
{
  float_32 speed_rad_per_sec,
}

message SetLiftHeight
{
  float_32 height_mm,
  float_32 max_speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
  float_32 duration_sec,
  uint_8   actionID = 0,
}

message SetLiftAngle
{
  float_32 angle_rad,
  float_32 max_speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
  float_32 duration_sec,
  uint_8   actionID = 0,
}

message SetHeadAngle
{
  float_32 angle_rad,
  float_32 max_speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
  float_32 duration_sec,
  uint_8   actionID = 0,
}

// This is a turn in place to an absolute angle
message SetBodyAngle
{
  float_32 angle_rad,              // Absolute angle the robot should achieve at the end of the turn.
  float_32 max_speed_rad_per_sec,  // Maximum speed of the turn (sign determines the direction of the turn)
  float_32 accel_rad_per_sec2,     // Accel/decel to use during the turn
  float_32 angle_tolerance,
  uint_16 num_half_revolutions,    // Used for turns greater than 180 degrees (e.g. "turn 720 degrees")
  bool use_shortest_direction,     // If true, robot should take the shortest path to angle_rad and disregard
                                   // the sign of max_speed and num_half_revolutions. If false, consider sign
                                   // of max_speed and num_half_revolutions to determine which direction to
                                   // turn and how far to turn (e.g. for turns longer than 360 deg)
  uint_8   actionID = 0,
}

message TurnInPlaceAtSpeed
{
  float_32 speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
}

message StopAllMotors
{
}

message ClearPath
{
  uint_16 pathID,
}

message PathSegmentSpeed
{
  float_32 target,
  float_32 accel,
  float_32 decel,
}

message AppendPathSegmentLine
{
  float_32 x_start_mm,
  float_32 y_start_mm,
  float_32 x_end_mm,
  float_32 y_end_mm,
  PathSegmentSpeed speed,
}

message AppendPathSegmentArc
{
  float_32 x_center_mm,
  float_32 y_center_mm,
  float_32 radius_mm,
  float_32 startRad,
  float_32 sweepRad,
  PathSegmentSpeed speed,
}

message AppendPathSegmentPointTurn
{
  float_32 x_center_mm,
  float_32 y_center_mm,
  float_32 startRad,
  float_32 targetRad,
  float_32 angleTolerance,
  PathSegmentSpeed speed, // targetSpeed indicates rotational speed in rad/s
  bool     useShortestDir
}

message TrimPath
{
  uint_8 numPopFrontSegments,
  uint_8 numPopBackSegments,
}

message ExecutePath
{
  uint_16 pathID,
}

message AbsoluteLocalizationUpdate
{
  uint_32 timestamp,
  uint_32 pose_frame_id,
  uint_32 origin_id,
  float_32 xPosition,
  float_32 yPosition,
  float_32 headingAngle,
}

// Used only for testing with simulated robots. Engine will never send this message if it is talking
// talking to a simulated robot
message ForceDelocalizeSimulatedRobot
{

}

message SyncRobot
{

}

message EngineFullyLoaded
{

}

message CalmPowerMode
{
  bool enable,
}

// Tells syscon to pull the plug
message Shutdown
{
}

message ControllerGains
{
  float_32 kp,
  float_32 ki,
  float_32 kd,
  float_32 maxIntegralError,
  ControllerChannel controller
}

message RollActionParams
{
   float_32 liftHeight_mm,
   float_32 driveSpeed_mmps,
   float_32 driveAccel_mmps2,
   uint_32 driveDuration_ms,
   float_32 backupDist_mm,
}

message PlaypenStart
{

}

message SelfTestEnd
{

}

message PrintBodyData
{
  // Print syscon body data to log every specified number of tics.
  // 0 means disable print.
  uint_32 period_tics,
  bool motors,
  bool prox,
  bool battery,
}

message SetMotionModelParams
{
  float_32 slipFactor,
}

message BackpackSetLayer
{
  uint_8 layer
}

message CheckLiftLoad
{
}

// Enable/Disable power to lift completely.
// Once disabled, must be re-enabled before motor can be commanded again.
// Only works for MOTOR_LIFT and MOTOR_HEAD.
message EnableMotorPower
{
  MotorID motorID,
  bool    enable
}

// Message for ACKing the RobotStopped message from robot process
// which re-enables the SteeringController/WheelController which
// were disabled upon encountering cliff so as not to accidentally
// drive off it.
message RobotStoppedAck
{
}

message EnableStopOnCliff
{
  bool enable
}

// When enabled stops the robot whenever it encounters a
// cliff reading that is higher than MIN_CLIFF_STOP_ON_WHITE_VAL
message EnableStopOnWhite
{
  bool enable
}

// Message to start/stop action that aligns the cliffs sensors with a white line.
// Assumes at least one of the front cliffs sensors is already detecting
// a value greater than MIN_CLIFF_STOP_ON_WHITE_VAL.
message CliffAlignToWhiteAction
{
  bool start
}


message EnableBraceWhenFalling
{
  bool enable
}


// ========== V2 Animation process messages ===========

message PlayAnim
{
  uint_32 numLoops = 1,
  uint_32 startAt_ms = 0, // time to start the animation playback at
  uint_8  tag,
  bool renderInEyeHue = 1,
  string animName, // must be last
}

// Aborts the specified animation.
// If tag == 0 (i.e. kNotAnimatingTag), cancels whatever animation is currently playing.
message AbortAnimation
{
  uint_8  tag,
}

// Disables Face Keepalive and neutral eyes keepalive
message EnableKeepFaceAlive
{
  uint_32 disableTimeout_ms,  // If enable == false, the amount of time to wait before actually disabling
  bool    enable
}

message SetDefaultKeepFaceAliveParameters
{
}

message SetKeepFaceAliveParameter
{
  float_32               value,
  KeepFaceAliveParameter param,
  bool                   setToDefault = 0, // If true, value is ignored
}

message AddOrUpdateEyeShift
{
  float_32 xPix,
  float_32 yPix,
  uint_32 duration_ms,
  float_32 xMax,
  float_32 yMax,
  float_32 lookUpMaxScale,
  float_32 lookDownMinScale,
  float_32 outerEyeScaleIncrease,
  string name,
}

message RemoveEyeShift
{
  uint_32 disableTimeout_ms,
  string name,
}

message AddSquint
{
  float_32 squintScaleX,
  float_32 squintScaleY,
  float_32 upperLidAngle,
  string name,
}

message RemoveSquint
{
  uint_32 disableTimeout_ms,
  string name,
}


message SetFullAnimTrackLockState
{
  uint_8 trackLockState    // See AnimTrackFlags
}

message AddAnim
{
  string animPath
}

message RecordHeading
{
}

message TurnToRecordedHeading
{
  int_16 offset_deg,        // Offset from recorded angle
  int_16 speed_degPerSec,
  int_16 accel_degPerSec2,
  int_16 decel_degPerSec2,
  uint_16 tolerance_deg,
  uint_16 numHalfRevs,
  bool useShortestDir,
}

message SetBackpackLights
{
  LightState lights[3],
  uint_8 layer = 0      // 0 is BPL_USER
}

message SetSystemLight
{
  LightState light
}

message StartRecordingMicsRaw
{
  uint_32 duration_ms,
  bool    runFFT,
  string  path
}

message StartRecordingMicsProcessed
{
  uint_32 duration_ms,
  string  path
}

message StartPlaybackAudio
{
  string  path
}

message StartWakeWordlessStreaming
{
  uint_8 streamType,
  bool   playGetInFromAnimProcess 
}

message SetTriggerWordResponse
{
  AudioEngine::Multiplexer::PostAudioEvent postAudioEvent,
  int_32 minStreamingDuration_ms = -1,
  bool shouldTriggerWordStartStream = 0,
  bool shouldTriggerWordSimulateStream = 0,
  uint_8 getInAnimationTag = 0,
  string getInAnimationName,
}

message SetAlexaUXResponses
{
  // each array value is for a transition from Idle to
  // 0: Listening
  // 1: Thinking
  // 2: Speaking
  // 3: Error
  AudioEngine::Multiplexer::PostAudioEvent postAudioEvents[4],
  uint_8 getInAnimTags[4],
  string csvGetInAnimNames, // comma separated animation names (cpp-lite can't handle more than one string per message)
}

message ResetBeatDetector
{
}

message SetAlexaUsage
{
  bool optedIn
}

structure ColorRGB
{
  uint_8 r,
  uint_8 g,
  uint_8 b
}

message DrawTextOnScreen
{
  // Whether or not to override what is currently on screen, otherwise draws to "CustomText" debug
  // screen which will show when selected with the backpack button
  bool drawNow = 0,
  ColorRGB textColor,
  ColorRGB bgColor,
  string   text
}

message ShowUrlFace
{
  bool show
}

// Switch to the debug screen used for the vision system's "MirrorMode"
message EnableMirrorModeScreen
{
  bool enable
}

// DisplayProceduralFace
message DisplayProceduralFace
{
    ProceduralFaceParameters  faceParams,
    uint_32                   duration_ms     // Use uint_32 max value to keep the image on the screen
}

// SetFaceHue
message SetFaceHue
{
    float_32 hue // [0,1]
}

// SetFaceSaturation
message SetFaceSaturation
{
    float_32 saturation // [0,1]
}

message SetButtonWakeWord
{
    // no enum for now unless we add a third wakeword. true if alexa, false if "hey vector"
    bool isAlexa,
}

// Play animation as part of a composite image
// Image chunks are sent separately
message PlayCompositeAnimation
{
  uint_32 compositeImageID, // Link to composite image chunks
  uint_8  tag,
  string  animName
}

message DisplayCompositeImageChunk
{
  uint_32 compositeImageID, // Ensures chunks are for the same image
  uint_32 get_frame_interval_ms, // Interval at which to call Composite Image's GetFrame
  uint_32 duration_ms,      // Use uint_32 max value to keep the image on the screen
  Vision::CompositeImageChunk compositeImageChunk
}

message UpdateCompositeImage
{
  Vision::SerializedSpriteBox serializedSpriteBox, // SpriteBox named count indicates clear the whole layer
  uint_32                     applyAt_ms, // specify the time in ms from the start of the animation that the update should be applied
  uint_16                     assetID,
  Vision::LayerName           layerName,
}


// TODO: Move to messageGameToEngine.clad or shared file
// DisplayFaceImageBinaryChunk
// Bit-image: one bit for each of 184x96 pixels = 2208 bytes
// If index == 0, this is the top half of the image
// If index == 1, this is the bottom half of the image
// Image is actually drawn when index == 1 as long as the associated
// top half (i.e. index == 0) message with matching tag was received.
// The duration_ms that is actually used is whichever last image half
// is sent. Just make sure they're the same for both halves!
message DisplayFaceImageBinaryChunk {
    uint_32  duration_ms,     // Use uint_32 max value to keep the image on the screen
    uint_8   faceData[1104],  // TODO: Make size a clad const
    uint_8   imageId,         // ID for this image, used only to track chunks of the same image
    uint_8   chunkIndex
}

// Format: 1200 pixels, 8-bits each (grayscale)
message DisplayFaceImageGrayscaleChunk {
    uint_32  duration_ms,     // Use uint_32 max value to keep the image on the screen
    uint_8   faceData[1200],  // TODO: Make size a clad const
    uint_16  numPixels,       // Number of pixels in faceData
    uint_8   imageId,         // ID for this image, used only to track chunks of the same image
    uint_8   chunkIndex
}

// Format: 600 pixels, 16-bits each (RGB565)
message DisplayFaceImageRGBChunk {
    uint_32  duration_ms,     // Use uint_32 max value to keep the image on the screen
    uint_16  faceData[600],   // TODO: Make size a clad const
    uint_16  numPixels,       // Number of pixels in faceData
    uint_8   imageId,         // ID for this image, used only to track chunks of the same image
    uint_8   chunkIndex
}

// FakeWakeWordFromExternalInterface - used to trigger wakeword reactions in the anim process from Webots
message FakeWakeWordFromExternalInterface
{
}

// SetDebugConsoleVarMessage - for getting console vars to AnimProcess (until we have nicer web interface)
message SetDebugConsoleVarMessage {
  uint_8 varName[64],   // Array of chars, zero-terminated
  uint_8 tryValue[16]   //   "
}

message RunDebugConsoleFuncMessage {
  uint_8 funcName[64],   // Array of chars, zero-terminated
  uint_8 funcArgs[64]   //   "
}

//
// Sent from engine to robot (anim process) to prepare TTS audio
//
message TextToSpeechPrepare {
  AudioMetaData::SwitchState::Robot_Vic_External_Processing style, // Audio processing style
  float_32 durationScalar,             // Duration adjustment
  TextToSpeechTriggerMode triggerMode, // Trigger mode
  uint_8 ttsID,                        // ID of utterance
  int_8 text[1024]                     // Text to be pronounced
}

//
// Sent from engine to robot (anim process) to play a prepared TTS
//
message TextToSpeechPlay {
  uint_8 ttsID // ID of utterance
}

//
// Sent from engine to robot (anim process) to cancel TTS
//
message TextToSpeechCancel {
  uint_8 ttsID  // ID of utterance
}

// If this delay message is sent before a message with the specified tag, when that tag is
// received the message will be delayed until the animation streamer reaches the specified time
// These delays:
//   1) will queue
//   2) will be applied to messages in the order they are received
//   3) messages will be dropped if the animation is cleared before reaching the specified timestamp
// If applyBeforeTick is true the messages will be applied and then the animationStreamer will be ticked
// otherwise, they will be applied immediately after the animationStreamer tick
//   (e.g. lock face track as soon as it's updated)

// This message wraps other messages related to streaming animations, and rather than applying the message
// when it's received the message will be applied when the current streaming animation reaches the specified stream time
// If the streaming animation is canceled before it hits the stream time this message will be dropped
// When applyBeforeTick is true the alteration is displayed to the user that tick (e.g. display a new image)
// When false, the alteration is applied after the keyframe's processed (e.g. lock face track after drawing an image)
message AlterStreamingAnimationAtTime {
  uint_32 relativeStreamTime_ms,
  bool    applyBeforeTick = 1,
  uint_8  internalTag, // Indicates which message below is set
  SetFullAnimTrackLockState setFullAnimTrackLockState,
  uint_8 padding[1],
  AudioEngine::Multiplexer::PostAudioEvent postAudioEvent,
  TextToSpeechPlay textToSpeechPlay
}

//
// Sent from engine to robot (anim process) to set locale preference.
// Locale string has the format "en-US" for use with Anki::Util::Locale.
//
message SetLocale {
  string locale
}

message SetLCDBrightnessLevel {
  LCDBrightness level
}

message BatteryStatus {
  bool isLow,
  bool isCharging,
  bool onChargerContacts,
  bool isBatteryFull,
  bool isBatteryDisconnected  // happens when it is too hot to charge (needs to cooldown)
                              // the robot reports charging, when it actually is not
}

message TriggerBackpackAnimation {
  BackpackAnimationTrigger trigger,
}

message AcousticTestEnabled {
  bool enabled,
}

//
// Sent from engine to robot (anim process) to prepare for streaming audio data to the robot speaker
//
message ExternalAudioPrepare {
  uint_16 audio_volume,
  uint_16 audio_rate
}

//
// Sent from engine to robot (anim process) to stream audio data to the robot speaker
//
message ExternalAudioChunk {
  uint_16 audio_chunk_size,       //size in bytes
  uint_16 audio_chunk_data[512]   //16-bit little-endian data
}

//
// Sent from engine to robot (anim process) to signal end of streaming data
//
message ExternalAudioComplete {
}

//
// Sent from engine to robot (anim process) to cancel streaming audio playback
//
message ExternalAudioCancel {
}

// Because we're running low on message tags, expand this enum and message as we add more settings
// that we want to send to anim/robot.  To expand, update the Process_updatedSettings() method.
// We're not using the proto enums for the settings here, because it's proto, not clad, and because
// we're already dealing with two types of settings (robot settings and account settings)
enum uint_8 SettingBeingChanged {
  SETTING_ENABLE_DATA_COLLECTION,
  SETTING_TIME_ZONE,
}

message UpdatedSettings {
  SettingBeingChanged settingBeingChanged,
  bool                enableDataCollection,
  string              timeZone,
}

message RangeDataToDisplay
{
  RangeDataDisplay data
}

// ====================================================

enum uint_32 ToRobotAddressSpace
{
  GLOBAL_INVALID_TAG = 0,
  TO_SUPERVISOR_START = 0x01,
  TO_SUPERVISOR_END   = 0x4F,
  TO_ANIM_START = 0x50,
  TO_ANIM_END   = 0xAF,
  TO_ENG_START  = 0xB0,
  TO_ENG_UNREL  = 0xF0,
  TO_ENG_END    = 0xFE
}

/// *************** Overall message pipe ******************************* ///

/** Pipe from engine to animation process and robot (supervisor) process
 * This cannot be an auto union because we need explicit tag values to partition the messages between the engine (not
 * included in this file), anim process, and robot process. And significantly to make debugging from message dumps
 * more sane.
 */
union EngineToRobot
{
  // 0x00 Is invalid message

  // 0x01 to 0x4f: Messages to robot (supervisor) process

  // Init
  SyncRobot                     syncRobot                   = 0x02,
  Shutdown                      shutdown                    = 0x03,
  CalmPowerMode                 calmPowerMode               = 0x04,

  // Debug / Test
  StartControllerTestMode       startControllerTestMode     = 0x0A,
  ControllerGains               setControllerGains          = 0x0B,
  SetMotionModelParams          setMotionModelParams        = 0x0C,
  RollActionParams              rollActionParams            = 0x0D,
  PlaypenStart                  playpenStart                = 0x0E,
  PrintBodyData                 printBodyData               = 0x0F,

  // Motor control
  DriveWheels                   drive                       = 0x10,
  DriveWheelsCurvature          driveCurvature              = 0x11,
  MoveLift                      moveLift                    = 0x12,
  MoveHead                      moveHead                    = 0x13,
  SetLiftHeight                 liftHeight                  = 0x14,
  SetHeadAngle                  headAngle                   = 0x15,
  SetLiftAngle                  setLiftAngle                = 0x16,
  SetBodyAngle                  setBodyAngle                = 0x17,
  TurnInPlaceAtSpeed            turnInPlaceAtSpeed          = 0x18,
  RecordHeading                 recordHeading               = 0x19,
  TurnToRecordedHeading         turnToRecordedHeading       = 0x1A,
  EnableMotorPower              enableMotorPower            = 0x1B,
  StopAllMotors                 stop                        = 0x1C,

  // Lights
  BackpackSetLayer              setBackpackLayer            = 0x1D,
  SetBackpackLights             setBackpackLights           = 0x1E,
  SetSystemLight                setSystemLight              = 0x1F,

  // Path messages
  ClearPath                     clearPath                   = 0x20,
  AppendPathSegmentLine         appendPathSegLine           = 0x21,
  AppendPathSegmentArc          appendPathSegArc            = 0x22,
  AppendPathSegmentPointTurn    appendPathSegPointTurn      = 0x23,
  TrimPath                      trimPath                    = 0x24,
  ExecutePath                   executePath                 = 0x25,

  // Docking messages
  DockWithObject                dockWithObject              = 0x26,
  AbortDocking                  abortDocking                = 0x27,
  PlaceObjectOnGround           placeObjectOnGround         = 0x28,
  DockingErrorSignal            dockingErrorSignal          = 0x2A,
  CarryStateUpdate              setCarryState               = 0x2B,
  CameraFOVInfo                 cameraFOVInfo               = 0x2C,

  // Localization
  AbsoluteLocalizationUpdate    absLocalizationUpdate       = 0x2D,
  ForceDelocalizeSimulatedRobot forceDelocalizeSimulatedRobot = 0x2E, // Used for simulation only, no-op for physical

  // Sensor messages
  IMURequest                    imuRequest                  = 0x30,
  CheckLiftLoad                 checkLiftLoad               = 0x31,
  SetCliffDetectThresholds      setCliffDetectThresholds    = 0x32,
  SetWhiteDetectThresholds      setWhiteDetectThresholds    = 0x39,

  // Calibration
  StartMotorCalibration         startMotorCalibration       = 0x33,

  // Reactions
  EnableStopOnCliff             enableStopOnCliff           = 0x34,
  EnableBraceWhenFalling        enableBraceWhenFalling      = 0x35,
  RobotStoppedAck               robotStoppedAck             = 0x36,
  CliffAlignToWhiteAction       cliffAlignToWhiteAction     = 0x37,
  EnableStopOnWhite             enableStopOnWhite           = 0x38,

  // 0x50 to 0xAF: To Anim Process
  PlayAnim                      playAnim                    = 0x50,
  SetFullAnimTrackLockState     setFullAnimTrackLockState   = 0x51,
  AddAnim                       addAnim                     = 0x52,
  AbortAnimation                abortAnimation              = 0x53,
  SetLocale                     setLocale                   = 0x54,
  DrawTextOnScreen              drawTextOnScreen            = 0x55,

  DisplayProceduralFace         displayProceduralFace       = 0x56,
  SetFaceHue                    setFaceHue                  = 0x57,
  SetFaceSaturation             setFaceSaturation           = 0x58,
  DisplayFaceImageBinaryChunk   displayFaceImageBinaryChunk = 0x59,
  DisplayFaceImageRGBChunk      displayFaceImageRGBChunk    = 0x5A,

  SetDefaultKeepFaceAliveParameters setDefaultKeepFaceAliveParameters = 0x5B,
  SetKeepFaceAliveParameter     setKeepFaceAliveParameter   = 0x5C,
  EnableKeepFaceAlive           enableKeepFaceAlive         = 0x5D,
  AddOrUpdateEyeShift           addOrUpdateEyeShift         = 0x5E,
  RemoveEyeShift                removeEyeShift              = 0x5F,
  AddSquint                     addSquint                   = 0x60,
  RemoveSquint                  removeSquint                = 0x61,

  DisplayFaceImageGrayscaleChunk   displayFaceImageGrayscaleChunk      = 0x62,
  DisplayCompositeImageChunk       displayCompositeImageChunk          = 0x63,
  UpdateCompositeImage             updateCompositeImage                = 0x64,
  PlayCompositeAnimation           playCompositeAnimation              = 0x65,
  EnableMirrorModeScreen           enableMirrorModeScreen              = 0x66,

  SetButtonWakeWord                setButtonWakeWord                   = 0x67,

  AudioEngine::Multiplexer::PostAudioEvent        postAudioEvent       = 0x70,
  AudioEngine::Multiplexer::StopAllAudioEvents    stopAllAudioEvents   = 0x71,
  AudioEngine::Multiplexer::PostAudioGameState    postAudioGameState   = 0x72,
  AudioEngine::Multiplexer::PostAudioSwitchState  postAudioSwitchState = 0x73,
  AudioEngine::Multiplexer::PostAudioParameter    postAudioParameter   = 0x74,
  
  ExternalAudioPrepare          externalAudioPrepare        = 0x75,
  ExternalAudioChunk            externalAudioChunk          = 0x76,
  ExternalAudioComplete         externalAudioComplete       = 0x77,
  ExternalAudioCancel           externalAudioCancel         = 0x78,

  FakeWakeWordFromExternalInterface fakeWakeWordFromExternalInterface = 0x80,
  ShowUrlFace                   showUrlFace                 = 0x81,

  SetDebugConsoleVarMessage     setDebugConsoleVarMessage   = 0x90,
  RunDebugConsoleFuncMessage    runDebugConsoleFuncMessage  = 0x91,
  TextToSpeechPrepare           textToSpeechPrepare         = 0x92,
  // Available                                              = 0x93,
  TextToSpeechPlay              textToSpeechPlay            = 0x94,
  TextToSpeechCancel            textToSpeechCancel          = 0x95,

  StartRecordingMicsRaw         startRecordingMicsRaw       = 0x96,
  StartRecordingMicsProcessed   startRecordingMicsProcessed = 0x97,
  StartPlaybackAudio            playbackAudioStart          = 0x98,

  StartWakeWordlessStreaming    startWakeWordlessStreaming = 0x99,
  SetTriggerWordResponse        setTriggerWordResponse     = 0x9A,
  SetAlexaUXResponses           setAlexaUXResponses        = 0x9B,

  ResetBeatDetector             resetBeatDetector           = 0x9C,

  SetAlexaUsage                 setAlexaUsage               = 0x9D,

  SwitchboardInterface::SetConnectionStatus     setConnectionStatus = 0xA0,
  SwitchboardInterface::SetBLEPin               setBLEPin                 = 0xA1,
  AlterStreamingAnimationAtTime                 alterStreamingAnimation   = 0xA2,
  SwitchboardInterface::SendBLEConnectionStatus sendBLEConnectionStatus   = 0xA3,

  SelfTestEnd               selfTestEnd               = 0xA4,

  AcousticTestEnabled       acousticTestEnabled       = 0xA5,

  RangeDataToDisplay        rangeDataToDisplay        = 0xA6,

  SetLCDBrightnessLevel     setLCDBrightnessLevel     = 0xAA,

  BatteryStatus             batteryStatus             = 0xAB,

  TriggerBackpackAnimation  triggerBackpackAnimation  = 0xAC,

  EngineFullyLoaded         engineFullyLoaded         = 0xAD,

  CheckCloudConnectivity    checkCloudConnectivity    = 0xAE,

  UpdatedSettings           updatedSettings           = 0xAF,

  // 0xB0 to 0xFE: To engine, see messageRobotToEngine.clad
}


} // namespace RobotInterface
} // namespace Vector
} // namespace Anki
